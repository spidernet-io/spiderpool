// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2022 Authors of spidernet-io
// SPDX-License-Identifier: Apache-2.0

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Route IPAM CNI types Route
//
// swagger:model Route
type Route struct {

	// dst
	// Required: true
	Dst *string `json:"dst"`

	// gw
	// Required: true
	Gw *string `json:"gw"`

	// if name
	// Required: true
	IfName *string `json:"ifName"`
}

// Validate validates this route
func (m *Route) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDst(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGw(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIfName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Route) validateDst(formats strfmt.Registry) error {

	if err := validate.Required("dst", "body", m.Dst); err != nil {
		return err
	}

	return nil
}

func (m *Route) validateGw(formats strfmt.Registry) error {

	if err := validate.Required("gw", "body", m.Gw); err != nil {
		return err
	}

	return nil
}

func (m *Route) validateIfName(formats strfmt.Registry) error {

	if err := validate.Required("ifName", "body", m.IfName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this route based on context it is used
func (m *Route) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Route) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Route) UnmarshalBinary(b []byte) error {
	var res Route
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
