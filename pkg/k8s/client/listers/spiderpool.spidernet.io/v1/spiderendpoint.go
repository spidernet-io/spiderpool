// Copyright 2022 Authors of spidernet-io
// SPDX-License-Identifier: Apache-2.0

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/spidernet-io/spiderpool/pkg/k8s/apis/spiderpool.spidernet.io/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SpiderEndpointLister helps list SpiderEndpoints.
// All objects returned here must be treated as read-only.
type SpiderEndpointLister interface {
	// List lists all SpiderEndpoints in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.SpiderEndpoint, err error)
	// SpiderEndpoints returns an object that can list and get SpiderEndpoints.
	SpiderEndpoints(namespace string) SpiderEndpointNamespaceLister
	SpiderEndpointListerExpansion
}

// spiderEndpointLister implements the SpiderEndpointLister interface.
type spiderEndpointLister struct {
	indexer cache.Indexer
}

// NewSpiderEndpointLister returns a new SpiderEndpointLister.
func NewSpiderEndpointLister(indexer cache.Indexer) SpiderEndpointLister {
	return &spiderEndpointLister{indexer: indexer}
}

// List lists all SpiderEndpoints in the indexer.
func (s *spiderEndpointLister) List(selector labels.Selector) (ret []*v1.SpiderEndpoint, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SpiderEndpoint))
	})
	return ret, err
}

// SpiderEndpoints returns an object that can list and get SpiderEndpoints.
func (s *spiderEndpointLister) SpiderEndpoints(namespace string) SpiderEndpointNamespaceLister {
	return spiderEndpointNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SpiderEndpointNamespaceLister helps list and get SpiderEndpoints.
// All objects returned here must be treated as read-only.
type SpiderEndpointNamespaceLister interface {
	// List lists all SpiderEndpoints in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.SpiderEndpoint, err error)
	// Get retrieves the SpiderEndpoint from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.SpiderEndpoint, error)
	SpiderEndpointNamespaceListerExpansion
}

// spiderEndpointNamespaceLister implements the SpiderEndpointNamespaceLister
// interface.
type spiderEndpointNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SpiderEndpoints in the indexer for a given namespace.
func (s spiderEndpointNamespaceLister) List(selector labels.Selector) (ret []*v1.SpiderEndpoint, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SpiderEndpoint))
	})
	return ret, err
}

// Get retrieves the SpiderEndpoint from the indexer for a given namespace and name.
func (s spiderEndpointNamespaceLister) Get(name string) (*v1.SpiderEndpoint, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("spiderendpoint"), name)
	}
	return obj.(*v1.SpiderEndpoint), nil
}
