// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2022 Authors of spidernet-io
// SPDX-License-Identifier: Apache-2.0

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IPConfig IPAM IPs struct, contains ifName, Address and Gateway
//
// swagger:model IpConfig
type IPConfig struct {

	// address
	// Required: true
	Address *string `json:"address"`

	// gateway
	Gateway string `json:"gateway,omitempty"`

	// nic
	// Required: true
	Nic *string `json:"nic"`

	// version
	// Required: true
	// Enum: [4 6]
	Version *int64 `json:"version"`

	// vlan
	Vlan int64 `json:"vlan,omitempty"`
}

// Validate validates this Ip config
func (m *IPConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPConfig) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("address", "body", m.Address); err != nil {
		return err
	}

	return nil
}

func (m *IPConfig) validateNic(formats strfmt.Registry) error {

	if err := validate.Required("nic", "body", m.Nic); err != nil {
		return err
	}

	return nil
}

var ipConfigTypeVersionPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[4,6]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ipConfigTypeVersionPropEnum = append(ipConfigTypeVersionPropEnum, v)
	}
}

// prop value enum
func (m *IPConfig) validateVersionEnum(path, location string, value int64) error {
	if err := validate.EnumCase(path, location, value, ipConfigTypeVersionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IPConfig) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	// value enum
	if err := m.validateVersionEnum("version", "body", *m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this Ip config based on context it is used
func (m *IPConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IPConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPConfig) UnmarshalBinary(b []byte) error {
	var res IPConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
