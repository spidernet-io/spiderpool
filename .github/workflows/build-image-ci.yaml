name: Auto Build Image CI

env:
  ONLINE_REGISTER: ghcr.io
  BUILD_PLATFORM: linux/amd64,linux/arm64
  ONLINE_REGISTER_USER: ${{ github.actor }}
  ONLINE_REGISTER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

on:
  pull_request_target:
    types:
      - opened
      - synchronize
      - reopened
  push:
    branches:
      - main
      - release-*
  workflow_run:
    workflows:
      - "Image CI Cache Cleaner"
    branches:
      - main
      - release-*
    types:
      - completed

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.event.after }}
  cancel-in-progress: true

jobs:
  # filter changes base filt path , so can do less thing
  filter_changes:
    name: Deduce required tests from code changes
    if: ${{ github.event_name == 'pull_request_target' }}
    runs-on: ubuntu-latest
    outputs:
      go-changes: ${{ steps.go-changes.outputs.src }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      # https://github.com/dorny/paths-filter
      - name: Check code changes
        uses: dorny/paths-filter@v2.10.2
        id: go-changes
        with:
          base: ${{ github.event.pull_request_target.base.sha }}
          ref: ${{ github.event.pull_request_target.head.sha }}
          filters: |
            src:
              - api/**
              - cmd/**
              - contrib/**
              - images/**
              - pkg/**
              - test/**
              - tools/**
              - vendor/**
              - 'go.sum'
              - 'go.mod'

  build-and-push-prs:
    needs: filter_changes
    if: ${{ needs.filter_changes.outputs.go-changes == 'true' || github.event_name != 'pull_request_target' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: spiderpool-agent
            dockerfile: ./images/spiderpool-agent/Dockerfile
            context: ./
          - name: spiderpool-controller
            dockerfile: ./images/spiderpool-controller/Dockerfile
            context: ./

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.6.0

      - name: Login to online register
        uses: docker/login-action@v1.14.1
        with:
          username: ${{ env.ONLINE_REGISTER_USER }}
          password: ${{ env.ONLINE_REGISTER_PASSWORD }}
          registry: ${{ env.ONLINE_REGISTER }}

      # commit sha is used for image tag
      - name: Getting image tag
        id: tag
        run: |
          if [ ${{ github.event.pull_request.head.sha }} != "" ]; then
            echo ::set-output name=tag::${{ github.event.pull_request.head.sha }}
          else
            echo ::set-output name=tag::${{ github.sha }}
          fi

      # checkout the changed code
      - name: Checkout Source Code
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          ref: ${{ steps.tag.outputs.tag }}

      - name: Getting Build Arg
        id: arg
        continue-on-error: false
        run: |
          GIT_COMMIT_VERSION=$( git show -s --format='format:%H')
          GIT_COMMIT_TIME=$( git show -s --format='format:%aI')
          echo ::set-output name=commitver::${GIT_COMMIT_VERSION}
          echo ::set-output name=committime::${GIT_COMMIT_TIME}

      # Load Golang cache build from GitHub
      # Cache dependencies and build outputs in GitHub Actions
      # the github will keep the cache for 7 days at most
      # we could see cache-hit result for this step
      - name: Load ${{ matrix.name }} Golang cache build from GitHub
        uses: actions/cache@v3
        id: cache
        with:
          # if find the cache mapping to "key" , will restore to "path"
          # when the key doesn't match an existing cache. A list of restore-keys is useful when you are restoring a cache from another branch
          path: /tmp/.cache/${{ matrix.name }}
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-${{ matrix.name }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-${{ matrix.name }}-
            ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-
            ${{ runner.os }}-go-

      # main branch pushes
      # build normal image
      - name: CI Build ${{ matrix.name }}
        if: ${{ github.event_name != 'pull_request_target' }}
        uses: docker/build-push-action@v2.10.0
        continue-on-error: false
        id: docker_build_ci_master
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          # Only push when the event name was a GitHub push, this is to avoid
          # re-pushing the image tags when we only want to re-create the Golang
          # docker cache after the workflow "Image CI Cache Cleaner" was terminated.
          push: ${{ github.event_name == 'push' }}
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.ONLINE_REGISTER }}/${{ github.repository }}/${{ matrix.name }}-ci:${{ steps.tag.outputs.tag }}
          build-args: |
            GIT_COMMIT_VERSION=${{ steps.arg.outputs.commitver }}
            GIT_COMMIT_TIME=${{ steps.arg.outputs.committime }}
            VERSION=${{ steps.tag.outputs.tag }}

      # build debug image who turn on race and deadlock detection
      - name: CI race detection Build ${{ matrix.name }}
        if: ${{ github.event_name != 'pull_request_target' }}
        uses: docker/build-push-action@v2.10.0
        continue-on-error: false
        id: docker_build_ci_master_detect_race_condition
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          # Only push when the event name was a GitHub push, this is to avoid
          # re-pushing the image tags when we only want to re-create the Golang
          # docker cache after the workflow "Image CI Cache Cleaner" was terminated.
          push: ${{ github.event_name == 'push' }}
          platforms: linux/amd64
          tags: |
            ${{ env.ONLINE_REGISTER }}/${{ github.repository }}/${{ matrix.name }}-ci:${{ steps.tag.outputs.tag }}-race
          build-args: |
            RACE=1
            GIT_COMMIT_VERSION=${{ steps.arg.outputs.commitver }}
            GIT_COMMIT_TIME=${{ steps.arg.outputs.committime }}
            VERSION=${{ steps.tag.outputs.tag }}

      - name: CI Image Releases digests
        if: ${{ github.event_name != 'pull_request_target' }}
        shell: bash
        run: |
          mkdir -p image-digest/
          echo "${{ env.ONLINE_REGISTER }}/${{ github.repository }}/${{ matrix.name }}-ci:${{ steps.tag.outputs.tag }}@${{ steps.docker_build_ci_master.outputs.digest }}" >> image-digest/${{ matrix.name }}.txt
          echo "${{ env.ONLINE_REGISTER }}/${{ github.repository }}/${{ matrix.name }}-ci:${{ steps.tag.outputs.tag }}-race@${{ steps.docker_build_ci_master_detect_race_condition.outputs.digest }}" > image-digest/${{ matrix.name }}.txt

      # trigger by PR updates
      - name: CI Build ${{ matrix.name }}
        if: ${{ github.event_name == 'pull_request_target' }}
        uses: docker/build-push-action@v2.10.0
        continue-on-error: false
        id: docker_build_ci_pr
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.ONLINE_REGISTER }}/${{ github.repository }}/${{ matrix.name }}-ci:${{ steps.tag.outputs.tag }}
          build-args: |
            GIT_COMMIT_VERSION=${{ steps.arg.outputs.commitver }}
            GIT_COMMIT_TIME=${{ steps.arg.outputs.committime }}
            VERSION=${{ steps.tag.outputs.tag }}

      - name: CI Image Releases digests
        if: ${{ github.event_name == 'pull_request_target' }}
        shell: bash
        run: |
          mkdir -p image-digest/
          echo "${{ env.ONLINE_REGISTER }}/${{ github.repository }}/${{ matrix.name }}-ci:${{ steps.tag.outputs.tag }}@${{ steps.docker_build_ci_pr.outputs.digest }}" > image-digest/${{ matrix.name }}.txt

      - name: CI race detection Build ${{ matrix.name }}
        if: ${{ github.event_name == 'pull_request_target' }}
        uses: docker/build-push-action@v2.10.0
        continue-on-error: false
        id: docker_build_ci_pr_detect_race_condition
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.ONLINE_REGISTER }}/${{ github.repository }}/${{ matrix.name }}-ci:${{ steps.tag.outputs.tag }}-race
          build-args: |
            RACE=1
            GIT_COMMIT_VERSION=${{ steps.arg.outputs.commitver }}
            GIT_COMMIT_TIME=${{ steps.arg.outputs.committime }}
            VERSION=${{ steps.tag.outputs.tag }}

      - name: CI Image Releases digests
        if: ${{ github.event_name == 'pull_request_target' }}
        shell: bash
        run: |
          mkdir -p image-digest/
          echo "${{ env.ONLINE_REGISTER }}/${{ github.repository }}/${{ matrix.name }}-ci:${{ steps.tag.outputs.tag }}@${{ steps.docker_build_ci_pr.outputs.digest }}" >> image-digest/${{ matrix.name }}.txt
          echo "${{ env.ONLINE_REGISTER }}/${{ github.repository }}/${{ matrix.name }}-ci:${{ steps.tag.outputs.tag }}-race@${{ steps.docker_build_ci_pr_detect_race_condition.outputs.digest }}" >> image-digest/${{ matrix.name }}.txt

      # Upload artifact digests
      - name: Upload artifact digests
        uses: actions/upload-artifact@v3.0.0
        with:
          name: image-digest ${{ matrix.name }}
          path: image-digest
          retention-days: 1

  image-digests:
    name: Display Digests
    runs-on: ubuntu-latest
    needs: [build-and-push-prs]
    steps:
      - name: Downloading Image Digests
        shell: bash
        run: |
          mkdir -p image-digest/

      - name: Download digests of all images built
        uses: actions/download-artifact@v3.0.0
        with:
          path: image-digest/

      - name: Image Digests Output
        shell: bash
        run: |
          cd image-digest/
          find -type f | sort | xargs -d '\n' cat
