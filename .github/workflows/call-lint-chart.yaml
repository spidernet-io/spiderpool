name: Auto Chart Lint

# validate any chart changes under charts directory

env:
  HELM_VERSION: v3.8.1
  KIND_VERSION: v0.12.0
  DEFAULT_BRANCH: main

on:
  # pull_request:
  #   paths:
  #     - "charts/**"
  workflow_call:
    inputs:
      ref:
        required: true
        type: string
  workflow_dispatch:
    inputs:
      ref:
        description: 'sha, tag, branch'
        required: true
        default: main

jobs:
  chart-lint-test:
    runs-on: ubuntu-latest
    steps:
      - name: Get Ref
        id: get_ref
        run: |
          if ${{ inputs.ref != '' }} ; then
              echo "trigger by workflow_call"
              echo ::set-output name=ref::${{ inputs.ref }}
          elif ${{ github.event_name == 'workflow_dispatch' }} ; then
              echo "trigger by workflow_dispatch"
              echo ::set-output name=ref::${{ github.event.inputs.ref }}
          elif ${{ github.event_name == 'pull_request' }} ; then
              echo "trigger by pull_request"
              echo ::set-output name=ref::${{ github.event.pull_request.head.sha }}
          else
              echo "error, trigger by unknown event ${{ github.event_name }}"
              exit 1
          fi

      # https://github.com/actions/checkout
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ steps.get_ref.outputs.ref }}

      - name: check version
        run: |
          chart_version=`cat VERSION | tr -d ' ' | tr -d 'v' `
          [ -z "$version" ] && echo "error, failed to find version" && exit 1
          echo "check version $version for chart"
          ! egrep "^version: \"*${chart_version}\"*" charts/spiderpool/Chart.yaml &>/dev/null && echo "error, version in Chart.yaml is not $chart_version" && exit 1
          ! egrep "^appVersion: \"*${chart_version}\"*" charts/spiderpool/Chart.yaml &>/dev/null && echo "error, appVersion in Chart.yaml is not $chart_version" && exit 1
          exit 0

      # The cached helm binary path is prepended to the PATH environment variable as well as stored in the helm-path output variable
      # https://github.com/Azure/setup-helm
      - name: Set up Helm
        uses: azure/setup-helm@v3.3
        with:
          version: ${{ env.HELM_VERSION }}

      # https://github.com/actions/setup-python
      - name: Set up Python
        uses: actions/setup-python@v4.2.0
        with:
          python-version: 3.8
          architecture: x64

      # https://github.com/helm/chart-testing-action
      # Pre-requisites: A GitHub repo containing a directory with your Helm charts (e.g: charts)
      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.3.0
        with:
          # CT version
          version: v3.6.0

      - name: Run chart-testing (list-changed)
        id: list-changed
        run: |
          # https://github.com/helm/chart-testing-action/issues/25
          # if the default branch is not master , the CLI exits with error
          changed=$( ct list-changed --target-branch ${{ env.DEFAULT_BRANCH }}  )
          if [[ -n "$changed" ]]; then
            echo "::set-output name=changed::true"
          fi

      # version checking, YAML schema validation on 'Chart.yaml', YAML linting on 'Chart.yaml'
      # and 'values.yaml', and maintainer validation
      - name: Run chart-testing (lint)
        run: ct lint --debug --target-branch=${{ env.DEFAULT_BRANCH }} --check-version-increment=false

      # https://github.com/helm/kind-action
      - name: Create Kind cluster
        if: steps.list-changed.outputs.changed == 'true'
        uses: helm/kind-action@v1.3.0
        with:
          wait: 120s

      #  It automatically detects charts changed
      - name: Run chart-testing (install)
        run: |
          tools/cert/generateCert.sh "/tmp/tls"
          CA=`cat /tmp/tls/ca.crt  | base64 -w0 | tr -d '\n' `
          SERVER_CERT=` cat /tmp/tls/server.crt | base64 -w0 | tr -d '\n' `
          SERVER_KEY=` cat /tmp/tls/server.key | base64 -w0 | tr -d '\n' `
          ct install --debug --target-branch ${{ env.DEFAULT_BRANCH }} --namespace kube-system \
              --helm-extra-set-args "--set=spiderpoolController.tls.provided.tlsCert=${SERVER_CERT} --set=spiderpoolController.tls.provided.tlsKey=${SERVER_KEY} --set=spiderpoolController.tls.provided.tlsCa=${CA}" \
              --helm-extra-args "--timeout 400s"
