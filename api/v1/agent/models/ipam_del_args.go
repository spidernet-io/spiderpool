// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2022 Authors of spidernet-io
// SPDX-License-Identifier: Apache-2.0

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IpamDelArgs IPAM release IP information
//
// swagger:model IpamDelArgs
type IpamDelArgs struct {

	// container ID
	// Required: true
	ContainerID *string `json:"containerID"`

	// if name
	// Required: true
	IfName *string `json:"ifName"`

	// net namespace
	NetNamespace string `json:"netNamespace,omitempty"`

	// pod name
	// Required: true
	PodName *string `json:"podName"`

	// pod namespace
	// Required: true
	PodNamespace *string `json:"podNamespace"`
}

// Validate validates this ipam del args
func (m *IpamDelArgs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContainerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIfName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePodName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePodNamespace(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpamDelArgs) validateContainerID(formats strfmt.Registry) error {

	if err := validate.Required("containerID", "body", m.ContainerID); err != nil {
		return err
	}

	return nil
}

func (m *IpamDelArgs) validateIfName(formats strfmt.Registry) error {

	if err := validate.Required("ifName", "body", m.IfName); err != nil {
		return err
	}

	return nil
}

func (m *IpamDelArgs) validatePodName(formats strfmt.Registry) error {

	if err := validate.Required("podName", "body", m.PodName); err != nil {
		return err
	}

	return nil
}

func (m *IpamDelArgs) validatePodNamespace(formats strfmt.Registry) error {

	if err := validate.Required("podNamespace", "body", m.PodNamespace); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this ipam del args based on context it is used
func (m *IpamDelArgs) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IpamDelArgs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IpamDelArgs) UnmarshalBinary(b []byte) error {
	var res IpamDelArgs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
