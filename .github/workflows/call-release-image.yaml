name: Call Release Image

env:
  ONLINE_REGISTER: ghcr.io
  BUILD_PLATFORM: linux/amd64,linux/arm64
  ONLINE_REGISTER_USER: ${{ github.actor }}
  ONLINE_REGISTER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

on:
  workflow_call:
    inputs:
      ref:
        required: true
        type: string
      suffix:
        required: false
        type: string
      tagoverride:
        required: false
        type: string

permissions: write-all

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: spiderpool-agent
            dockerfile: ./images/spiderpool-agent/Dockerfile
            context: ./
          - name: spiderpool-controller
            dockerfile: ./images/spiderpool-controller/Dockerfile
            context: ./

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.9.1

      - name: Login to online register
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ env.ONLINE_REGISTER_USER }}
          password: ${{ env.ONLINE_REGISTER_PASSWORD }}
          registry: ${{ env.ONLINE_REGISTER }}

      - name: Getting Image Ref
        id: ref
        run: |
          if ${{ inputs.ref != '' }} ; then
              echo "call by workflow_call"
              image_ref=${{ inputs.ref }}
              image_suffix=${{ inputs.suffix }}
          elif ${{ github.event_name == 'workflow_dispatch' }} ; then
              echo "call by workflow_dispatch"
              image_ref=${{ github.event.inputs.ref }}
              image_suffix=${{ github.event.inputs.suffix }}
          else
              echo "unexpected event: ${{ github.event_name }}"
              exit 1
          fi
          echo ::set-output name=ref::${image_ref}
          [ -n "${image_suffix}" ] && echo ::set-output name=suffix::-${image_suffix}
          if ${{ inputs.tagoverride != '' }} ; then
              echo ::set-output name=imagetag::${{ inputs.tagoverride }}
          else
              # it is invalid if the ref is branch name "xx/xx/xx"
              echo ::set-output name=imagetag::${image_ref##*/}
          fi
          exit 0

      - name: Checkout Source Code
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          ref: ${{ steps.ref.outputs.ref }}

      - name: Lint Dockerfile Trivy
        run: |
          make lint_dockerfile_trivy

      - name: Install Cosign
        uses: sigstore/cosign-installer@main
        with:
          # do not upgrade, or else go error
          cosign-release: 'v2.0.1'

      - name: Getting Build Arg
        id: arg
        run: |
          GIT_COMMIT_VERSION=$( git show -s --format='format:%H')
          GIT_COMMIT_TIME=$( git show -s --format='format:%aI')
          echo ::set-output name=commitver::${GIT_COMMIT_VERSION}
          echo ::set-output name=committime::${GIT_COMMIT_TIME}

      - name: Build Image ${{ matrix.name }}
        uses: docker/build-push-action@v4.1.1
        id: docker_build_release
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          github-token: ${{ secrets.WELAN_PAT }}
          push: true
          provenance: false
          platforms: ${{ env.BUILD_PLATFORM }}
          tags: |
            ${{ env.ONLINE_REGISTER }}/${{ github.repository }}/${{ matrix.name }}${{ steps.ref.outputs.suffix }}:${{ steps.ref.outputs.imagetag }}
          build-args: |
            GIT_COMMIT_VERSION=${{ steps.arg.outputs.commitver }}
            GIT_COMMIT_TIME=${{ steps.arg.outputs.committime }}
            VERSION=${{ steps.ref.outputs.ref }}

      - name: Sign Container Images
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          DIGEST=${{ steps.docker_build_release.outputs.digest }}
          cosign sign -y ${{ env.ONLINE_REGISTER }}/${{ github.repository }}/${{ matrix.name }}${{ steps.ref.outputs.suffix }}@${DIGEST}

      - name: Generate SBOM
        shell: bash
        run: |
          set -x
          #curl -L https://github.com/kubernetes-sigs/bom/releases/download/v0.5.1/bom-amd64-linux -o bom
          #chmod +x  ./bom
          DIGEST=${{ steps.docker_build_release.outputs.digest }}
          #./bom generate -o ${{ matrix.name }}_${DIGEST}.spdx \
          #      --image=${{ env.ONLINE_REGISTER }}/${{ github.repository }}/${{ matrix.name }}${{ steps.ref.outputs.suffix }}:${{ env.RUN_IMAGE_TAG }}@${DIGEST}
          wget https://github.com/anchore/syft/releases/download/v0.77.0/syft_0.77.0_linux_amd64.tar.gz
          tar xzvf syft_0.77.0_linux_amd64.tar.gz
          chmod +x syft
          ./syft -o spdx ${{ env.ONLINE_REGISTER }}/${{ github.repository }}/${{ matrix.name }}${{ steps.ref.outputs.suffix }}@${DIGEST} > ${{ matrix.name }}_${DIGEST}.spdx

      - name: Attach SBOM to Container Images
        run: |
          set -x
          DIGEST=${{ steps.docker_build_release.outputs.digest }}
          cosign attach sbom --sbom ${{ matrix.name }}_${DIGEST}.spdx  \
                ${{ env.ONLINE_REGISTER }}/${{ github.repository }}/${{ matrix.name }}${{ steps.ref.outputs.suffix }}@${DIGEST}

      - name: Sign SBOM Images
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          set -x
          DIGEST=${{ steps.docker_build_release.outputs.digest }}
          image_name="${{ env.ONLINE_REGISTER }}/${{ github.repository }}/${{ matrix.name }}${{ steps.ref.outputs.suffix }}:${DIGEST/:/-}.sbom"
          sbom_digest="sha256:$(docker buildx imagetools inspect --raw ${image_name} | sha256sum | head -c 64)"
          cosign sign -y "${{ env.ONLINE_REGISTER }}/${{ github.repository }}/${{ matrix.name }}${{ steps.ref.outputs.suffix }}@${sbom_digest}"

      - name: Image Release Digest
        shell: bash
        run: |
          mkdir -p image-digest/
          job_name=${{ matrix.name }}
          job_name_capital=${job_name^^}
          job_name_underscored=${job_name_capital//-/_}
          echo "${job_name_underscored}_DIGEST := \"${{ steps.docker_build_release.outputs.digest }}\"" > image-digest/makefile-digest.txt
          echo "### ${{ matrix.name }}" > image-digest/${{ matrix.name }}.txt
          echo "" >> image-digest/${{ matrix.name }}.txt
          echo "\`${{ env.ONLINE_REGISTER }}/${{ github.repository }}/${{ matrix.name }}${{ steps.ref.outputs.suffix }}:${{ steps.ref.outputs.imagetag }}@${{ steps.docker_build_release.outputs.digest }}\`" >> image-digest/${{ matrix.name }}.txt
          echo "" >> image-digest/${{ matrix.name }}.txt
          # ====== Image Digests Output =============
          cd image-digest/
          echo "## Docker Manifests" > ../image-digest-output.txt
          echo "" >> ../image-digest-output.txt
          find -type f -not -name "makefile-digest.txt" | sort | xargs -d '\n' cat >> ../image-digest-output.txt
          cd ..
          # ======= Image Makefile Digests =======
          cd image-digest/
          echo "# File generated by .github/workflows/images-legacy-releases.yaml; DO NOT EDIT." > ../Makefile.digests
          echo "# Copyright "$(date +'%Y')" " >> ../Makefile.digests
          echo "# SPDX-License-Identifier: Apache-2.0" >> ../Makefile.digests
          echo "" >> ../Makefile.digests
          find -type f  -name "makefile-digest.txt" | sort | xargs -d '\n' cat >> ../Makefile.digests
          cd ..

      - name: Upload artifact digests
        uses: actions/upload-artifact@v3.1.2
        with:
          name: image-digest-artifact-${{ steps.ref.outputs.imagetag }}
          path: image-digest-output.txt
          retention-days: 1

      - name: Upload artifact digests
        uses: actions/upload-artifact@v3.1.2
        with:
          name: makefile-digest-artifact-${{ steps.ref.outputs.imagetag }}
          path: Makefile.digests
          retention-days: 1
