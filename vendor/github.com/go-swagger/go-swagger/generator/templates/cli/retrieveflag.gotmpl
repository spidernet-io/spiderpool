{{/*util functions to retrieve flags*/}}

{{ define "primitiveretriever" }}
    {{- $flagValueVar := printf "%vFlagValue" (camelize .Name) }}
    {{- $flagNameVar := printf "%vFlagName" (camelize .Name )}}
    {{- if or (eq .GoType "int64") (eq .GoType "int32") (eq .GoType "string") (eq .GoType "float64") (eq .GoType "float32") (eq .GoType "bool") }}
        {{ template "flagnamevar" . }}
        {{ $flagValueVar }}, err := cmd.Flags().Get{{pascalize .GoType}}({{ $flagNameVar }})
        if err != nil{
            return err, false
        }
        {{- /* reciever by convention is m for CLI */}}
        m.{{ pascalize .Name }} = {{- if .IsNullable }}&{{- end }}{{ $flagValueVar }}
    {{- else if or (eq .GoType "strfmt.DateTime") (eq .GoType "strfmt.ObjectId") (eq .GoType "strfmt.UUID" ) }} {{/*Get flag value as string, then parse it*/}}
        {{/*Many of the strfmt types can be added here*/}}
        {{ template "flagnamevar" . }}
        {{ $flagValueVar }}Str, err := cmd.Flags().GetString({{ $flagNameVar }})
        if err != nil{
            return err, false
        }
        var {{ $flagValueVar }} {{ .GoType }}
		if err := {{ $flagValueVar }}.UnmarshalText([]byte({{ $flagValueVar }}Str)); err != nil{
            return err, false
        }
        m.{{ pascalize .Name }} = {{- if .IsNullable }}&{{- end }}{{ $flagValueVar }}
    {{- else }}
        // warning: primitive {{.Name}} {{.GoType }} is not supported by go-swagger cli yet
    {{- end }}
{{ end }}

{{ define "arrayretriever" }}
    {{- $flagValueVar := printf "%vFlagValues" (camelize .Name) }}
    {{- $flagNameVar := printf "%vFlagName" (camelize .Name )}}
    {{- if or (eq .GoType "[]int64") (eq .GoType "[]int32") (eq .GoType "[]string") (eq .GoType "[]float64") (eq .GoType "[]float32") (eq .GoType "[]bool") }}
        {{ template "flagnamevar" . }}
        {{ $flagValueVar }}, err := cmd.Flags().Get{{pascalize .GoType}}Slice({{ $flagNameVar }})
        if err != nil{
            return err, false
        }
        {{- /* reciever by convention is m for CLI */}}
        m.{{ pascalize .Name }} = {{- if .IsNullable }}&{{- end }}{{ $flagValueVar }}
    {{- else if or (eq .GoType "[]strfmt.DateTime") (eq .GoType "[]strfmt.ObjectId") (eq .GoType "[]strfmt.UUID") }} {{/*Get flag value as string, then parse it*/}}
        {{ template "flagnamevar" . }}
        {{ $flagValueVar }}Str, err := cmd.Flags().GetStringSlice({{ $flagNameVar }})
        if err != nil{
            return err, false
        }

        {{ $flagValueVar }} := make({{ .GoType }}, len({{ $flagValueVar }}Str))
        for i, v := range {{ $flagValueVar }}Str {
            if err := {{ $flagValueVar }}[i].UnmarshalText([]byte(v)); err != nil{
                return err, false
            }
        }
        m.{{ pascalize .Name }} = {{- if .IsNullable }}&{{- end }}{{ $flagValueVar }}
    {{- else }}
        // warning: array {{.Name}} {{.GoType }} is not supported by go-swagger cli yet
    {{- end }}
{{ end }}