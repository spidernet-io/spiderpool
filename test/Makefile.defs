#============ e2e-kind-config ====================

# iptables,ipvs or none, default iptables
ifeq ($(DISABLE_KUBE_PROXY),true)
    E2E_KUBE_PROXY_MODE ?= none
else
    E2E_KUBE_PROXY_MODE ?= iptables
endif

E2E_CHINA_IMAGE_REGISTRY ?= false
HTTP_PROXY ?=

K8S_IPV4_SERVICE_CIDR = 10.233.0.0/18
K8S_IPV6_SERVICE_CIDR = fd00:10:233::/116

CLUSTER_POD_SUBNET_V4 = 10.233.64.0/18
CLUSTER_POD_SUBNET_V6 = fd00:10:233:64::/64
CALICO_CLUSTER_POD_SUBNET_V4 = 10.243.64.0/18
CALICO_CLUSTER_POD_SUBNET_V6 = fd00:10:243::/112
CILIUM_CLUSTER_POD_SUBNET_V4 = 10.244.64.0/18
CILIUM_CLUSTER_POD_SUBNET_V6 = fd00:10:244::/112

# ipv4 or ipv6 or dual, default ipv4
E2E_IP_FAMILY ?= dual

# kubernetes version
E2E_KIND_IMAGE_TAG ?= v1.27.1
# with kind default version
# E2E_KIND_IMAGE_TAG ?= 

ifeq ($(E2E_CHINA_IMAGE_REGISTRY),true)
    E2E_KIND_IMAGE_NAME ?= docker.m.daocloud.io/kindest/node
else
    E2E_KIND_IMAGE_NAME ?= docker.io/kindest/node
endif

# disable default cni, default true
E2E_DISABLE_DEFAULT_CNI ?= true

INSTALL_MACVLAN ?= true

INSTALL_MULTUS ?= true

INSTALL_KRUISE ?= true

INSTALL_OVERLAY_CNI ?= false

INSTALL_CALICO ?= true

INSTALL_CILIUM ?= true

DISABLE_KUBE_PROXY ?= false

INSTALL_NETTOOLS ?= false

INSTALL_SPIDERDOCTOR ?= true

INSTALL_KUBEVIRT ?= false

CNI_PACKAGE_VERSION ?= v1.3.0

#============ ginkgo-custom-flag ====================
E2E_CLUSTER_NAME ?= spider

RELEASE_NAME ?= spiderpool
RELEASE_NAMESPACE ?= kube-system

# multi flag separated by commas,like setup,ippool
E2E_GINKGO_LABELS ?=

GINKGO_OPTION ?=

E2E_TIMEOUT ?= 60m

E2E_GINKGO_PROCS ?= 4

E2E_SPIDERPOOL_ENABLE_SUBNET ?= true # consistent with open source, closed by default
E2E_SPIDERPOOL_ENABLE_COORDINATOR ?= true
E2E_SPIDERPOOL_ENABLE_MULTUSCONFIG ?= true

E2E_HELM_ADDITIONAL_OPTIONS ?=

#============Image version===========
ifeq ($(E2E_CHINA_IMAGE_REGISTRY),true)
  TEST_IMAGE_NAME ?= docker.m.daocloud.io/alpine:latest
else
  TEST_IMAGE_NAME ?= docker.io/alpine:latest
endif

#USE_TLS_METHOD := certmanager
#USE_TLS_METHOD := provided
USE_TLS_METHOD := auto

ifeq ($(E2E_CHINA_IMAGE_REGISTRY),true)
    IMAGE_PYROSCOPE_NAME ?= docker.m.daocloud.io/pyroscope/pyroscope:latest
else
    IMAGE_PYROSCOPE_NAME ?= docker.io/pyroscope/pyroscope:latest
endif


CERT_MANAGER_VERSION := v1.8.0
ifeq ($(E2E_CHINA_IMAGE_REGISTRY),true)
    IMAGE_CERT_MANAGER_REPO := quay.m.daocloud.io/jetstack
else
    IMAGE_CERT_MANAGER_REPO := quay.io/jetstack
endif
IMAGE_CERT_MANAGER_NAME := $(IMAGE_CERT_MANAGER_REPO)/cert-manager-cainjector:$(CERT_MANAGER_VERSION) $(IMAGE_CERT_MANAGER_REPO)/cert-manager-cainjector:$(CERT_MANAGER_VERSION) $(IMAGE_CERT_MANAGER_REPO)/cert-manager-webhook:$(CERT_MANAGER_VERSION) $(IMAGE_CERT_MANAGER_REPO)/cert-manager-controller:$(CERT_MANAGER_VERSION)
CERT_MANAGER_ISSUER_NAME := selfsigned

ifeq ($(E2E_CHINA_IMAGE_REGISTRY),true)
    E2E_VLAN_GATEWAY_IMAGE ?= docker.m.daocloud.io/centos/tools:latest
else
    E2E_VLAN_GATEWAY_IMAGE ?= docker.io/centos/tools:latest
endif

VLAN_GATEWAY_CONTAINER := vlan-gateway

#================= multus
MULTUS_DEFAULT_CNI_CALICO := k8s-pod-network
MULTUS_DEFAULT_CNI_CILIUM := cilium
MULTUS_DEFAULT_CNI_VLAN0 := macvlan-vlan0
MULTUS_DEFAULT_CNI_VLAN100 := macvlan-vlan100
MULTUS_DEFAULT_CNI_VLAN200 := macvlan-vlan200
MULTUS_KUBEVIRT_CNI_VLAN30 := kubevirt-macvlan-vlan30
MULTUS_KUBEVIRT_CNI_VLAN40 := kubevirt-macvlan-vlan40

ifeq ($(E2E_CHINA_IMAGE_REGISTRY),true)
    E2E_MULTUS_IMAGE_REGISTER ?= ghcr.m.daocloud.io
else
    E2E_MULTUS_IMAGE_REGISTER ?= ghcr.io
endif
E2E_MULTUS_IMAGE_NAME ?= $(E2E_MULTUS_IMAGE_REGISTER)/k8snetworkplumbingwg/multus-cni


#================= calico
CALICO_VERSION ?= v3.25.0

ifeq ($(E2E_CHINA_IMAGE_REGISTRY),true)
  CALICO_IMAGE_REPO ?= docker.m.daocloud.io
else
  CALICO_IMAGE_REPO ?= docker.io
endif

CALICO_AUTODETECTION_METHOD ?= "kubernetes-internal-ip"

#================= cilium
ifeq ($(E2E_CHINA_IMAGE_REGISTRY),true)
    E2E_CILIUM_IMAGE_REPO ?= "quay.m.daocloud.io"
else
    E2E_CILIUM_IMAGE_REPO ?= "quay.io"
endif

CILIUM_VERSION ?=

#================= spiderdoctor
SPIDERDOCTOR_VERSION ?= v0.3.0

ifeq ($(E2E_CHINA_IMAGE_REGISTRY),true)
    E2E_SPIDERDOCTOR_IMAGE_REPO ?= ghcr.m.daocloud.io
else
    E2E_SPIDERDOCTOR_IMAGE_REPO ?= ghcr.io
endif

SPIDERDOCTOR_REPORT_PATH=/var/log/spiderdoctor/controller

#====== pyroscope
PYROSCOPE_CONTAINER_NAME := e2e-pyroscope
PYROSCOPE_LOCAL_PORT := 4040

#============Tmp Path================
# do not modify this ,it is also written on CI workflow file
DOWNLOAD_DIR := $(ROOT_DIR)/test/.download
CLUSTER_DIR := $(ROOT_DIR)/test/.cluster
E2E_KUBECONFIG := $(CLUSTER_DIR)/$(E2E_CLUSTER_NAME)/.kube/config

#=============http_proxy=============
http_proxy ?=

E2E_LOG_FILE ?= $(ROOT_DIR)/test/e2edebugLog.txt

#========= openkruise =========

ifeq ($(E2E_CHINA_IMAGE_REGISTRY),true)
    E2E_OPENKRUISE_IMAGE ?= docker.m.daocloud.io/openkruise/kruise-manager
else
    E2E_OPENKRUISE_IMAGE ?= docker.io/openkruise/kruise-manager
endif

#========= rdma shared dp =========

ifeq ($(E2E_CHINA_IMAGE_REGISTRY),true)
    E2E_RDMA_DP_IMAGE_REPO ?= ghcr.m.daocloud.io
else
    E2E_RDMA_DP_IMAGE_REPO ?= ghcr.io
endif

#========= sriov =========

ifeq ($(E2E_CHINA_IMAGE_REGISTRY),true)
    E2E_SRIOV_IMAGE_REPO ?= ghcr.m.daocloud.io
else
    E2E_SRIOV_IMAGE_REPO ?= ghcr.io
endif

#=========== kubevrit ============

# empty for latest
KUBEVIRT_VERSION :=

ifeq ($(E2E_CHINA_IMAGE_REGISTRY),true)
    E2E_KUBEVIRT_IMAGE_REPO ?= quay.m.daocloud.io
else
    E2E_KUBEVIRT_IMAGE_REPO ?= quay.io
endif
