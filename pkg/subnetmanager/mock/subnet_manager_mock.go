// Copyright 2022 Authors of spidernet-io
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: ./subnet_manager.go

// Package mock_subnetmanager is a generated GoMock package.
package mock_subnetmanager

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/spidernet-io/spiderpool/pkg/k8s/apis/spiderpool.spidernet.io/v1"
	types "github.com/spidernet-io/spiderpool/pkg/types"
	v10 "k8s.io/apimachinery/pkg/apis/meta/v1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockSubnetManager is a mock of SubnetManager interface.
type MockSubnetManager struct {
	ctrl     *gomock.Controller
	recorder *MockSubnetManagerMockRecorder
}

// MockSubnetManagerMockRecorder is the mock recorder for MockSubnetManager.
type MockSubnetManagerMockRecorder struct {
	mock *MockSubnetManager
}

// NewMockSubnetManager creates a new mock instance.
func NewMockSubnetManager(ctrl *gomock.Controller) *MockSubnetManager {
	mock := &MockSubnetManager{ctrl: ctrl}
	mock.recorder = &MockSubnetManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubnetManager) EXPECT() *MockSubnetManagerMockRecorder {
	return m.recorder
}

// AllocateEmptyIPPool mocks base method.
func (m *MockSubnetManager) AllocateEmptyIPPool(ctx context.Context, subnetMgrName string, podController types.PodTopController, podSelector *v10.LabelSelector, ipNum int, ipVersion types.IPVersion, reclaimIPPool bool, ifName string) (*v1.SpiderIPPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateEmptyIPPool", ctx, subnetMgrName, podController, podSelector, ipNum, ipVersion, reclaimIPPool, ifName)
	ret0, _ := ret[0].(*v1.SpiderIPPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateEmptyIPPool indicates an expected call of AllocateEmptyIPPool.
func (mr *MockSubnetManagerMockRecorder) AllocateEmptyIPPool(ctx, subnetMgrName, podController, podSelector, ipNum, ipVersion, reclaimIPPool, ifName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateEmptyIPPool", reflect.TypeOf((*MockSubnetManager)(nil).AllocateEmptyIPPool), ctx, subnetMgrName, podController, podSelector, ipNum, ipVersion, reclaimIPPool, ifName)
}

// CheckScaleIPPool mocks base method.
func (m *MockSubnetManager) CheckScaleIPPool(ctx context.Context, pool *v1.SpiderIPPool, subnetManagerName string, ipNum int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckScaleIPPool", ctx, pool, subnetManagerName, ipNum)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckScaleIPPool indicates an expected call of CheckScaleIPPool.
func (mr *MockSubnetManagerMockRecorder) CheckScaleIPPool(ctx, pool, subnetManagerName, ipNum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckScaleIPPool", reflect.TypeOf((*MockSubnetManager)(nil).CheckScaleIPPool), ctx, pool, subnetManagerName, ipNum)
}

// GetSubnetByName mocks base method.
func (m *MockSubnetManager) GetSubnetByName(ctx context.Context, subnetName string) (*v1.SpiderSubnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubnetByName", ctx, subnetName)
	ret0, _ := ret[0].(*v1.SpiderSubnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnetByName indicates an expected call of GetSubnetByName.
func (mr *MockSubnetManagerMockRecorder) GetSubnetByName(ctx, subnetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnetByName", reflect.TypeOf((*MockSubnetManager)(nil).GetSubnetByName), ctx, subnetName)
}

// ListSubnets mocks base method.
func (m *MockSubnetManager) ListSubnets(ctx context.Context, opts ...client.ListOption) (*v1.SpiderSubnetList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSubnets", varargs...)
	ret0, _ := ret[0].(*v1.SpiderSubnetList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubnets indicates an expected call of ListSubnets.
func (mr *MockSubnetManagerMockRecorder) ListSubnets(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubnets", reflect.TypeOf((*MockSubnetManager)(nil).ListSubnets), varargs...)
}
