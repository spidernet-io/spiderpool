// Copyright 2022 Authors of spidernet-io
// SPDX-License-Identifier: Apache-2.0

// Code generated by informer-gen. DO NOT EDIT.

package v2beta1

import (
	"context"
	time "time"

	spiderpoolspidernetiov2beta1 "github.com/spidernet-io/spiderpool/pkg/k8s/apis/spiderpool.spidernet.io/v2beta1"
	versioned "github.com/spidernet-io/spiderpool/pkg/k8s/client/clientset/versioned"
	internalinterfaces "github.com/spidernet-io/spiderpool/pkg/k8s/client/informers/externalversions/internalinterfaces"
	v2beta1 "github.com/spidernet-io/spiderpool/pkg/k8s/client/listers/spiderpool.spidernet.io/v2beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// SpiderCoordinatorInformer provides access to a shared informer and lister for
// SpiderCoordinators.
type SpiderCoordinatorInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v2beta1.SpiderCoordinatorLister
}

type spiderCoordinatorInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewSpiderCoordinatorInformer constructs a new informer for SpiderCoordinator type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewSpiderCoordinatorInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredSpiderCoordinatorInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredSpiderCoordinatorInformer constructs a new informer for SpiderCoordinator type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredSpiderCoordinatorInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.SpiderpoolV2beta1().SpiderCoordinators().List(context.TODO(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.SpiderpoolV2beta1().SpiderCoordinators().Watch(context.TODO(), options)
			},
		},
		&spiderpoolspidernetiov2beta1.SpiderCoordinator{},
		resyncPeriod,
		indexers,
	)
}

func (f *spiderCoordinatorInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredSpiderCoordinatorInformer(client, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *spiderCoordinatorInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&spiderpoolspidernetiov2beta1.SpiderCoordinator{}, f.defaultInformer)
}

func (f *spiderCoordinatorInformer) Lister() v2beta1.SpiderCoordinatorLister {
	return v2beta1.NewSpiderCoordinatorLister(f.Informer().GetIndexer())
}
