// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2022 Authors of spidernet-io
// SPDX-License-Identifier: Apache-2.0

package controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostIpamGcIpsHandlerFunc turns a function with the right signature into a post ipam gc ips handler
type PostIpamGcIpsHandlerFunc func(PostIpamGcIpsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostIpamGcIpsHandlerFunc) Handle(params PostIpamGcIpsParams) middleware.Responder {
	return fn(params)
}

// PostIpamGcIpsHandler interface for that can handle valid post ipam gc ips params
type PostIpamGcIpsHandler interface {
	Handle(PostIpamGcIpsParams) middleware.Responder
}

// NewPostIpamGcIps creates a new http.Handler for the post ipam gc ips operation
func NewPostIpamGcIps(ctx *middleware.Context, handler PostIpamGcIpsHandler) *PostIpamGcIps {
	return &PostIpamGcIps{Context: ctx, Handler: handler}
}

/* PostIpamGcIps swagger:route POST /ipam/gc_ips controller postIpamGcIps

Trigger gc

Trigger global gc or specific ip gc with the param


*/
type PostIpamGcIps struct {
	Context *middleware.Context
	Handler PostIpamGcIpsHandler
}

func (o *PostIpamGcIps) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostIpamGcIpsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
